# Multi-app deployment workflow for monorepo
name: Deploy Apps

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # Detectar cambios para deployment selectivo
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      admin-changed: ${{ steps.changes.outputs.admin }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            client:
              - 'apps/client/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            admin:
              - 'apps/admin/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            backend:
              - 'backend/**'
              - 'requirements.txt'

  # Test y lint
  test-and-lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true' || needs.detect-changes.outputs.admin-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        run: pnpm type-check
        
      - name: Lint
        run: pnpm lint
        
      - name: Build apps
        run: pnpm build

  # Deploy Client a Cloudflare Pages
  deploy-client:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-lint]
    if: needs.detect-changes.outputs.client-changed == 'true' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install and build
        run: |
          pnpm install --frozen-lockfile
          pnpm build:client
          
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ar-e-web-client
          directory: apps/client/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Deploy Admin a Cloudflare Pages
  deploy-admin:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-lint]
    if: needs.detect-changes.outputs.admin-changed == 'true' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install and build
        run: |
          pnpm install --frozen-lockfile
          pnpm build:admin
          
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ar-e-web-admin
          directory: apps/admin/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          cd backend
          python manage.py test
